<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Qwerty-61 · Blog</title>
  
  <subtitle>是不可替代，是唯有热爱</subtitle>
  <link href="https://qwerty-61.github.io/atom.xml" rel="self"/>
  
  <link href="https://qwerty-61.github.io/"/>
  <updated>2022-10-21T00:55:07.303Z</updated>
  <id>https://qwerty-61.github.io/</id>
  
  <author>
    <name>Qwerty-61</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于CTFhub技能树Web之信息泄露（二）</title>
    <link href="https://qwerty-61.github.io/posts/43a5bf47.html"/>
    <id>https://qwerty-61.github.io/posts/43a5bf47.html</id>
    <published>2022-10-17T10:11:00.000Z</published>
    <updated>2022-10-21T00:55:07.303Z</updated>
    
    <content type="html"><![CDATA[<span class='p center logo large'>Web之信息泄露</span><span class='p center small'>噗哈哈哈哈哈哈哈哈哈\(^o^)/~</span><div class="tip success"><p><1> 目录遍历</p></div><p>访问靶机，有个“点击开始寻找flag”，先F12一下，没看出来啥，so点击“点击开始寻找flag”，如图：<br>根据提示，可以看出是apache的目录遍历<br><div class="img-wrap"><div class="img-bg"><img class="img" src="http://png.eot.ooo/i/2022/10/20/63510b0908872.png" style="width: 160;height: 60,;"/></div></div><br>emmm那就一个一个挨着点，最后在这里看到了flag.txt<br>（看到说是可以编写脚本来自动遍历目录，不会，就先这样罢，，，=_=)<br><div class="img-wrap"><div class="img-bg"><img class="img" src="http://png.eot.ooo/i/2022/10/20/63510c358c3ae.png" style="width: 160;height: 60,;"/></div></div><br>点击，拿到flag.<br><div class="img-wrap"><div class="img-bg"><img class="img" src="http://png.eot.ooo/i/2022/10/20/63510c50342d5.png" style="width: 160;height: 60,;"/></div></div></p><div class="tip success"><p><2> PHPINFO</p></div><p>打开靶机，如图<br><div class="img-wrap"><div class="img-bg"><img class="img" src="http://png.eot.ooo/i/2022/10/20/63510f7be89b7.png" style="width: 160;height: 60,;"/></div></div><br>额还是这样的界面，直接点开<br>往下翻（直接ctrl+f)搜索flag，找到如图位置处，<br><div class="img-wrap"><div class="img-bg"><img class="img" src="http://png.eot.ooo/i/2022/10/20/63510f8d2cacc.png" style="width: 160;height: 60,;"/></div></div><br>提交flag，成功。</p><div class="tip success"><p><3> 备份文件下载</p></div><div class="note success modern"><p>success 1）网站源码</p></div><p>点开，如图<br><div class="img-wrap"><div class="img-bg"><img class="img" src="http://png.eot.ooo/i/2022/10/20/6351149b93018.png" style="width: 160;height: 60,;"/></div></div><br>查看提示：<br><div class="img-wrap"><div class="img-bg"><img class="img" src="http://png.eot.ooo/i/2022/10/20/635114a729859.jpg" style="width: 160;height: 60,;"/></div></div><br>可以根据提示中告诉我们的网站的备份文件名和后缀名查找，都试一遍，发现www.zip中有三个文件，其中一个名字是flag_190925660.txt,。<br><div class="img-wrap"><div class="img-bg"><img class="img" src="http://png.eot.ooo/i/2022/10/20/635114b16500f.png" style="width: 160;height: 60,;"/></div></div><br>点开那个文件里面没有flag，于是把它加到url后面，出来flag页面<br><div class="img-wrap"><div class="img-bg"><img class="img" src="http://png.eot.ooo/i/2022/10/20/635114bae5ff3.png" style="width: 160;height: 60,;"/></div></div><br>提交flag，成功。</p><p>ps:见到有人使用python脚本扫描，</p><pre><code>import requestsif __name__ == &#39;__main__&#39;:    # url为被扫描地址，后不加‘/’    url1 = &#39;http://challenge-3c36914916e0b990.sandbox.ctfhub.com:10800&#39;            # 常见的网站源码备份文件名    list1 = [&#39;web&#39;, &#39;website&#39;, &#39;backup&#39;, &#39;back&#39;, &#39;www&#39;, &#39;wwwroot&#39;, &#39;temp&#39;]    # 常见的网站源码备份文件后缀    list2 = [&#39;tar&#39;, &#39;tar.gz&#39;, &#39;zip&#39;, &#39;rar&#39;]    for i in list1:        for j in list2:            back = str(i) + &#39;.&#39; + str(j)            url = str(url1) + &#39;/&#39; + back            print(back + &#39;    &#39;, end=&#39;&#39;)            print(requests.get(url).status_code)</code></pre><div class="img-wrap"><div class="img-bg"><img class="img" src="http://png.eot.ooo/i/2022/10/20/635117fdf0d5c.jpg" style="width: 160;height: 60,;"/></div></div><div class="note success modern"><p>success 2)bak文件</p></div><p>打开靶机，如图所示：<br><div class="img-wrap"><div class="img-bg"><img class="img" src="http://png.eot.ooo/i/2022/10/20/63511b4ace295.png" style="width: 160;height: 60,;"/></div></div><br>说是，flag在index.php中。<br>那我们就在url后面加上/index.php.bak<br>下载下来，记事本打开，看到了flag ^_^<br><div class="img-wrap"><div class="img-bg"><img class="img" src="http://png.eot.ooo/i/2022/10/20/63511b4cd2d0e.png" style="width: 160;height: 60,;"/></div></div><br>提交，成功。</p><div class="note success modern"><p>success 3）vim缓存</p></div><div class="note success modern"><p>success 4）.DS_Store</p></div><div class="tip success"><p><4> Git泄露</p></div><div class="tip success"><p><5> SVN泄露</p></div><div class="tip success"><p><6> HG泄露</p></div>]]></content>
    
    
      
      
    <summary type="html">&lt;span class=&#39;p center logo large&#39;&gt;Web之信息泄露&lt;/span&gt;
&lt;span class=&#39;p center small&#39;&gt;噗哈哈哈哈哈哈哈哈哈\(^o^)/~&lt;/span&gt;
&lt;div class=&quot;tip success&quot;&gt;&lt;p&gt;&lt;1&gt; 目录遍</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>关于CTFhub技能树Web之http（一）</title>
    <link href="https://qwerty-61.github.io/posts/82e1e9ec.html"/>
    <id>https://qwerty-61.github.io/posts/82e1e9ec.html</id>
    <published>2022-10-06T12:57:44.000Z</published>
    <updated>2022-10-21T02:04:19.714Z</updated>
    
    <content type="html"><![CDATA[<span class='p center logo large'>Web之http</span><span class='p center small'>噗哈哈哈哈哈哈哈哈哈\(^o^)/~</span><div class="tip success"><p><1> 请求方式</p></div><pre><code>【根据HTTP协议，HTTP请求可以使用多种请求方法。】1.GET请求请求指定的页面信息并返回实体主体。2.HEAD请求类似于GET请求，但只返回响应的头信息。3.POST请求将需操作数据包含在数据包中发给指定资源进行处理请求。4.PUT请求将资源上传到指定位置并覆盖原本该位置的资源，完成数据的更新。5.DELETE请求请求服务器删除Request-URL所标识的资源。6.CONNECT请求HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。7.OPTIONS请求返回服务器针对特定资源所支持的HTTP请求方法，也可以利用向web服务器发送‘*’的请求来测试服务器的功能性。8.TRACE请求回显服务器收到的请求。</code></pre><p>开启题目，点开链接。可以看到下图。<br><div class="img-wrap"><div class="img-bg"><img class="img" src="http://png.eot.ooo/i/2022/10/12/6346ca33cd947.png" style="width: 160;height: 60,;"/></div></div><br>根据提示，可以想到需要用CTFHUB 的请求方式 请求index.php 才能拿到flag<br>这就需要用到curl命令（使用curl命令中的-X选项指定请求方法访问网站。）</p><p>参数：<br>-v       显示整个通信的过程<br>-X     指定HTTP请求方法</p><p>即输入<div class="note green no-icon flat"><p>curl -v -X CTFHUB <a href="http://******/index.php">http://******/index.php</a></p></div></p><p>关于curl命令，详细讲解转—-&gt;<br><div class="tag link"><a class="link-card" title="curl" href="http://t.csdn.cn/eQbyf"><div class="left"><img src="http://png.eot.ooo/i/2022/10/12/6346ae42b2940.png"/></div><div class="right"><p class="text">curl</p><p class="url">http://t.csdn.cn/eQbyf</p></div></a></div></p><p>输入命令，运行成功，从中可以看到flag。如下图所示。<br><div class="img-wrap"><div class="img-bg"><img class="img" src="http://png.eot.ooo/i/2022/10/12/6346e1eb8085e.png" style="width: 220;height: 160,;"/></div></div></p><div class="tip success"><p><2> 302跳转</p></div><div class="tip success"><p><3> Cookie</p></div><p>打开靶机场景：<br><div class="img-wrap"><div class="img-bg"><img class="img" src="http://png.eot.ooo/i/2022/10/17/634d25c44be96.png" style="width: 160;height: 60,;"/></div></div><br>点开链接：<br><div class="img-wrap"><div class="img-bg"><img class="img" src="http://png.eot.ooo/i/2022/10/17/634d276dd8af4.png" style="width: 160;height: 60,;"/></div></div><br>根据提示，需要admin登录才能得到flag<br>cookie：<br>在网站中，http请求是无状态的。也就是说即使第一次和服务器连接后并且登录成功后，第二次请求服务器依然不能知道当前请求是哪个用户。cookie的出现就是为了解决这个问题，第一次登录后服务器返回一些数据（cookie）给浏览器，然后浏览器保存在本地，当该用户发送第二次请求的时候，就会自动的把上次请求存储的cookie数据自动的携带给服务器，服务器通过浏览器携带的数据就能判断当前用户是哪个了。cookie存储的数据量有限，不同的浏览器有不同的存储大小，但一般不超过4KB。因此使用cookie只能存储一些小量的数据。<br>session和cookie的作用有点类似，都是为了存储用户相关的信息。不同的是，cookie是存储在本地浏览器，而session存储在服务器。存储在服务器的数据会更加的安全，不容易被窃取。但存储在服务器也有一定的弊端，就是会占用服务器的资源，但现在服务器已经发展至今，一些session信息还是绰绰有余的。</p><p>打开burpsuite进行抓取数据包</p><p>我们burp抓包之后，发现了 admin=0<br>0(False)  1(True)<br>因此我们把其改为1 然后发包<br>得到flag。<br><div class="img-wrap"><div class="img-bg"><img class="img" src="http://png.eot.ooo/i/2022/10/17/634d279269f27.png" style="width: 160;height: 60,;"/></div></div><br><div class="img-wrap"><div class="img-bg"><img class="img" src="http://png.eot.ooo/i/2022/10/17/634d27860b03b.png" style="width: 160;height: 60,;"/></div></div></p><div class="tip success"><p><4> 基础认证</p></div><div class="tip success"><p><5> 响应包源代码</p></div>]]></content>
    
    
      
      
    <summary type="html">&lt;span class=&#39;p center logo large&#39;&gt;Web之http&lt;/span&gt;
&lt;span class=&#39;p center small&#39;&gt;噗哈哈哈哈哈哈哈哈哈\(^o^)/~&lt;/span&gt;
&lt;div class=&quot;tip success&quot;&gt;&lt;p&gt;&lt;1&gt; 请求方</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://qwerty-61.github.io/posts/4a17b156.html"/>
    <id>https://qwerty-61.github.io/posts/4a17b156.html</id>
    <published>2022-10-05T14:40:56.893Z</published>
    <updated>2022-10-20T11:16:48.133Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
